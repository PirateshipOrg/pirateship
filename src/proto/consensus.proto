syntax = "proto3";

package proto.consensus;

message ProtoNameWithSignature {
    string name = 1;
    bytes sig = 2;
}
message ProtoQuorumCertificate {
    bytes digest = 1;                        // Hash of certifying block
    uint64 n = 2;                            // Sequence number of certifying block
    repeated ProtoNameWithSignature sig = 3; // signer node --> Signature mapping;
                                             // but represented as array of tuples, so that protobuf doesn't reorder them
    uint64 view = 4;
}

// Empty type
message DefferedSignature { }

message ProtoViewChange {
    uint64 view = 1;
    ProtoFork fork = 2;
    bytes fork_sig = 3;
}

message ProtoForkValidation {
    ProtoViewChange view_change_message = 1;
    string name = 2;
}


message ProtoBlock {
    repeated bytes tx = 1;                   // list of transactions; needs to be its own type later.
    uint64 n = 2;                            // sequence number; u64 => don't worry about wrap-around.
    bytes parent = 3;                        // Hash chain parent
    uint64 view = 4;                         // proposer must be Leader(view)
    repeated ProtoQuorumCertificate qc = 5;  // List of quorum certificates attached to this block.
    repeated ProtoForkValidation fork_validation = 6; // List of view change messages. To check if this block is coming from a suitable fork.
    bool view_is_stable = 7;
    
    oneof sig {
        DefferedSignature no_sig = 8;
        bytes proposer_sig = 9;
    }


}

// This is different from the logical view of a fork with fields `last` and `last_qc`.
message ProtoFork {
    repeated ProtoBlock blocks = 1;
}


message ProtoAppendEntries {
    ProtoFork fork = 1;
    uint64 commit_index = 2;
    uint64 view = 4;
    bool view_is_stable = 5;
}

message ProtoSignatureArrayEntry {
    uint64 n = 1;                                // Sequence number
    bytes sig = 2;
}

message ProtoVote {
    repeated ProtoSignatureArrayEntry sig_array = 1;
    bytes fork_digest = 2;
    uint64 n = 3;
    uint64 view = 4;
    bool is_nack = 5;
}